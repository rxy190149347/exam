#include "stm32f10x.h"
#include "key.h"
#include "sys.h" 
#include "delay.h"
#include "pid.h"
#include "lcd.h"
#include "w25qxx.h"
#include "spi.h"

vu8 key;	
u8 t0 = 0;
u8 t1 = 0;
extern pid_typedef pid;
extern u8 lcd_kp[10];
extern u8 lcd_ki[10];
extern u8 lcd_kd[10];
//按键初始化函数
void KEY_Init(void) //IO初始化
{ 
 	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOE,ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOE,&GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&GPIO_InitStructure);

}
//按键处理函数
//返回按键值
//mode:0,不支持连续按;1,支持连续按;
//0，没有任何按键按下
//1，KEY0按下
//2，KEY1按下
//3，KEY3按下 WK_UP
//注意此函数有响应优先级,KEY0>KEY1>KEY_UP!!
u8 KEY_Scan(u8 mode)
{	 
	static u8 key_up=1;//按键按松开标志
	if(mode)key_up=1;  //支持连按		  
	if(key_up&&(KEY0==0||KEY1==0||WK_UP==1))
	{
		delay_ms(10);//去抖动 
		key_up=0;
		if(KEY0==0)return KEY0_PRES;
		else if(KEY1==0)return KEY1_PRES;
		else if(WK_UP==1)return WKUP_PRES;
	}else if(KEY0==1&&KEY1==1&&WK_UP==0)key_up=1; 	    
 	return 0;// 无按键按下
}

/**************使用按键进行pid值得调整***********/
void key_out(void)
{
	key=KEY_Scan(0);
	switch(key)
			{	
		    case 0:break;	
				case KEY0_PRES:	t0++;
				  if(t0 == 3)
				  t0 = 0;
				  break;	
        case KEY1_PRES:t1++;
				  if(t1 == 2)
					  t1 = 0;
					  break;				
				case WKUP_PRES:	
					if(t1==0&&t0==0)
					{
						pid.Kp+=0.1;
						sprintf(lcd_kp,"%f",pid.Kp);
						W25QXX_Write((u8 *)lcd_kp,128*1024*1024-100,8);			//从倒数第100个地址处开始,写入SIZE长度的数据
					}
					else if(t1==0&&t0==1)
					{
						pid.Ki+=0.1;
						sprintf(lcd_ki,"%f",pid.Ki);
						W25QXX_Write((u8 *)lcd_ki,128*1024*1024-90,8);			//从倒数第90个地址处开始,写入SIZE长度的数据
					}
					else if(t1==0&&t0==2)
					{	
					  pid.Kd+=0.1;
						sprintf(lcd_kd,"%f",pid.Kd);
						W25QXX_Write((u8 *)lcd_kd,128*1024*1024-80,8);			//从倒数第80个地址处开始,写入SIZE长度的数据
					}
					else if(t1==1&&t0==0)
					{
						pid.Kp-=0.1;
						sprintf(lcd_kp,"%f",pid.Kp);
						W25QXX_Write((u8 *)lcd_kp,128*1024*1024-100,8);			//从倒数第100个地址处开始,写入SIZE长度的数据
					}
					else if(t1==1&&t0==1)
					{
						pid.Ki-=0.1;
						sprintf(lcd_ki,"%f",pid.Ki);
						W25QXX_Write((u8 *)lcd_ki,128*1024*1024-90,8);			//从倒数第90个地址处开始,写入SIZE长度的数据
					}
					else if(t1==1&&t0==2)
					{
						pid.Kd-=0.1;
						sprintf(lcd_kd,"%f",pid.Kd);
						W25QXX_Write((u8 *)lcd_kd,128*1024*1024-80,8);			//从倒数第80个地址处开始,写入SIZE长度的数据
					}
					break; 
				}
/***************选择调节的pid的值***************/
				if(t1==0&&t0==0)
				{
					LCD_Fill(215,38,229,54,WHITE);
					LCD_ShowChar(215,2,'*',16,1);
					LCD_ShowChar(200,2,'+',16,0);
				}	
				else if(t1==0&&t0==1)
				{
					LCD_Fill(215,2,229,18,WHITE);
					LCD_ShowChar(215,20,'*',16,0);
					LCD_ShowChar(200,2,'+',16,0);
				}
				else if(t1==0&&t0==2)
				{
					LCD_Fill(215,20,229,36,WHITE);
					LCD_ShowChar(215,38,'*',16,0);
					LCD_ShowChar(200,2,'+',16,0);
				}
				else if(t1==1&&t0==0)
				{
					LCD_Fill(215,38,229,54,WHITE);
					LCD_ShowChar(215,2,'*',16,0);
					LCD_ShowChar(200,2,'-',16,0);
				}
				else if(t1==1&&t0==1)
				{
					LCD_Fill(215,2,229,18,WHITE);
					LCD_ShowChar(215,20,'*',16,0);
					LCD_ShowChar(200,2,'-',16,0);
				}
				else if(t1==1&&t0==2)
				{
					LCD_Fill(215,20,229,36,WHITE);
					LCD_ShowChar(215,38,'*',16,0);
					LCD_ShowChar(200,2,'-',16,0);
				}
}






